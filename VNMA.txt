// 1) Implement a lexical analyzer for a subset of C using LEX Implementation should support
Error Handling.

1.l


%{
#include<math.h>
FILE *fp;
%}
digit[0-9]+
header "#include<"[a-z]+".h>"
inbuilt [\t]"printf(".")"|[\t]"scanf(".")"|[\t]"clrscr()"|[\t]"getch()"|[\t]*"exit(.+)"\n
comment [\t ]"/"."/"[\t]*\n
main_function "void main()"
function [\t][a-zA-Z]+"(".")"[\t]*\n
datatype [\t ]"int"|[\t ]"char"|[\t ]*"float"
operator "+"|"-"|"*"|"/"
terminator ";"
bracket1 [\t]"{"[\t]
bracket2 [\t]"}"[\t]
loop[\t ]"if(".")"|[\t ]"else"|[\t ]"for"|[\t ]"while"|[\t ]"do"
relational [\t]*"<"|">"|"<="|">="|"=="|"="|"!="|"%"
logical[\t]*"&&"|"||"
word[a-z]+[a-z0-9]*
%%
{digit} {printf("\n Numbers:: %s",yytext);}
{header} {printf("\n Header File:: %s",yytext);}
{inbuilt} {printf("\n Function:: %s",yytext);}
{comment} {printf("\n Comment:: %s",yytext);}
{main_function} {printf("\n Main Function :: %s",yytext);}
{function} {printf("\n User function:: %s",yytext);}
{datatype} {printf("\n Datatype:: %s",yytext);}
{operator} {printf("\n Operator:: %s",yytext);}
{terminator} {printf("\n Terminator:: %s",yytext);}
{bracket1} {printf("\n Opening curly bracket:: %s",yytext);}
{bracket2} {printf("\n Closing curly bracket:: %s",yytext);}
{relational} {printf("\n Realtional operator :: %s",yytext);}
{loop} {printf("\n Loop Statement :: %s",yytext);}
{logical} {printf("\n Logical Operator :: %s",yytext);}
{word} {printf("\n Variables:: %s",yytext);}
%%
int main(int argc,char *argv[])
{
fp=fopen(argv[1],"r");
if(fp!=NULL)
{
yyin=fp;
yylex();
}
return(0);
}




---------
1.c

#include<stdio.h>
void main() {
    int i;
    i = 10;
    printf("%d", i);
}


-------
//output:
 
lex 1.l
cc lex.yy.c -ll
./a.out 1.c 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





// 2) To Implement a lexical analyzer of identification of numbers



2.l


%{
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
FILE *fp;
%}

Binary   [01]+
Oct      [0-7]+
Dec      [0-9]+
Hex      [0-9A-Fa-f]+
Positive [+]?[1-9][0-9]*
Negative [-]?[1-9][0-9]*
PositiveF [+]?[1-9][0-9]*\.[0-9]+
NegativeF [-]?[1-9][0-9]*\.[0-9]+
Exponent [-+]?[0-9]\.?[0-9]+([eE][-+]?[0-9]\.?[0-9]+)?

%%
{Binary}     {printf("This is a binary number: %s\n", yytext);}
{Oct}        {printf("This is an octal number: %s\n", yytext);}
{Dec}        {printf("This is a decimal number: %s\n", yytext);}
{Hex}        {printf("This is a hexadecimal number: %s\n", yytext);}
{Positive}   {printf("This is a positive number: %s\n", yytext);}
{Negative}   {printf("This is a negative number: %s\n", yytext);}
{PositiveF}  {printf("This is a positive float number: %s\n", yytext);}
{NegativeF}  {printf("This is a negative float number: %s\n", yytext);}
{Exponent}   {printf("This is an exponent number: %s\n", yytext);}

%%

int main(int argc, char *argv[]) {
    fp = fopen(argv[1], "r");
    if (fp != NULL) {
        yyin = fp;
        yylex();
        fclose(fp);
    } else {
        printf("File not found.\n");
    }
    return 0;
}

---------------------

2.txt

10
-10
11.11
+11.00
11e05
+11
-11
ABCD

-------------------------
//output :

lex 2.l
cc lex.yy.c -ll
./a.out 2.txt

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





// 3) To Implement a Calculator using LEX and YACC.


3.l


%{
/* Definition section */
#include<stdio.h>
#include "y.tab.h"
extern int yylval;
%}
/* Rule Section */
%%
[0-9]+ {
yylval=atoi(yytext);
return NUMBER;
}
[\t] ;
[\n] return 0;
. return yytext[0];
%%
int yywrap()
{
return 1;
}


---------------------

3.y


%{
/* Definition section */
#include<stdio.h>
int flag=0;
%}
%{
int yylex();
void yyerror();
%}
%token NUMBER
%left '+' '-'
%left '*' '/' '%'
%left '(' ')'
/* Rule Section */
%%
ArithmeticExpression: E
{ printf("\nResult=%d\n", $$);
return 0;
};
E:E'+'E {$$=$1+$3;}
|E'-'E {$$=$1-$3;}
|E'*'E {$$=$1*$3;}
|E'/'E {$$=$1/$3;}
|E'%'E {$$=$1%$3;}
|'('E')' {$$=$2;}
| NUMBER {$$=$1;}
;
%%
//driver code
void main()
{
printf("\nEnter Any Arithmetic Expression which can have operations Addition,Subtraction,Multiplication,Divison, Modulus and Round brackets:\n");
yyparse();
if(flag==0) printf("\nEntered arithmetic expression is Valid\n\n");
}
void yyerror()
{ printf("\nEntered arithmetic expression is Invalid\n\n"); flag=1;
}


------------------
//output :

lex 3.l
yacc -d 3.y
cc lex.yy.c y.tab.c -ll -ly
./a.out

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


// 4 ) Implementation of Context Free Grammar


4.l

%{
#include "y.tab.h"
%}
%%
"0" {return ZERO;}
"1" {return ONE;}
[\n] {return NL;}
. ;
%% 

---------------
4.y


c


-------------------
//output ;

lex 4.l
yacc -d 4.y
cc lex.yy.c y.tab.c -ll -ly
./a.out


---------------------------------------------------------------------------------------------------------------------------------------------------------------

5) Aim: Implementation of Code Generator


5.l

%{
#include"stdio.h"
#include"y.tab.h"
%}


%%


[a-z][a-zA-Z0-9]* |

[0-9]+    {

		strcpy(yylval.vname,yytext);
		return NAME;
          } 
  
[ |\t] ;

.|\n { return yytext[0]; }
%%



-----------------

5.y


%{

#include"stdio.h"
#include"string.h"
#include"stdlib.h"
int yylex();
void yyerror();
void fcloseall();
FILE *fpOut;

%}

%union
{
	  char vname[10];
	  int val;
}

%left '+' '-'
%left '*' '/'
%token <vname> NAME
%type <vname> expression
%%

input : line '\n' input
        | '\n' input 
        | ;
line : NAME '=' expression {
		fprintf(fpOut,"MOV %s, AX\n",$1);
		}
     ;
		
	
expression:  NAME '+' NAME {
			fprintf(fpOut,"MOV AX, %s\n",$1);
			fprintf(fpOut,"ADD AX, %s\n",$3);
			}

            | NAME '-' NAME      {
			fprintf(fpOut,"MOV AX, %s\n",$1);
			fprintf(fpOut,"SUB AX, %s\n",$3);
			}
            | NAME '*' NAME 	{
			fprintf(fpOut,"MOV AX, %s\n",$1);
			fprintf(fpOut,"MUL AX, %s\n",$3);
			}
            | NAME '/' NAME        {
			fprintf(fpOut,"MOV AX, %s\n",$1);
			fprintf(fpOut,"DIV AX, %s\n",$3);
			}
            | NAME                 {
			fprintf(fpOut,"MOV AX, %s\n",$1);
			strcpy($$, $1);
			}
            ;
%%
FILE *yyin;
int main()
{

	FILE *fpInput;
	fpInput = fopen("input.txt","r");
	if(fpInput=='\0')
	{
		printf("file read error");
		exit(0);
	}
	fpOut = fopen("output.txt","w");
	//printf("%s",msg);
	if(fpOut=='\0')
	{
	printf("file creation error");
	exit(0);
	}
	yyin = fpInput;
	yyparse();
	void fcloseall();
	return 0;
}
void yyerror()
{

}

----------------------------------
OR
----------------------------------
%{

#include"stdio.h"
#include"string.h"
#include"stdlib.h"
int yylex();
void yyerror();
void fcloseall();
FILE *fpOut;
extern FILE *yyin;

%}

%union
{
	  char vname[10];
	  int val;
}

%left '+' '-'
%left '*' '/'
%token <vname> NAME
%type <vname> expression
%%

input : line '\n' input
        | '\n' input 
        | ;
line : NAME '=' expression {
		fprintf(fpOut,"MOV %s, AX\n",$1);
		}
     ;
		
	
expression:  NAME '+' NAME {
			fprintf(fpOut,"MOV AX, %s\n",$1);
			fprintf(fpOut,"ADD AX, %s\n",$3);
			}

            | NAME '-' NAME      {
			fprintf(fpOut,"MOV AX, %s\n",$1);
			fprintf(fpOut,"SUB AX, %s\n",$3);
			}
            | NAME '*' NAME 	{
			fprintf(fpOut,"MOV AX, %s\n",$1);
			fprintf(fpOut,"MUL AX, %s\n",$3);
			}
            | NAME '/' NAME        {
			fprintf(fpOut,"MOV AX, %s\n",$1);
			fprintf(fpOut,"DIV AX, %s\n",$3);
			}
            | NAME                 {
			fprintf(fpOut,"MOV AX, %s\n",$1);
			strcpy($$, $1);
			}
            ;
%%

int main()
{

	FILE *fpInput;
	fpInput = fopen("input.txt","r");
	if(fpInput == NULL)
	{
		printf("file read error");
		exit(0);
	}
	fpOut = fopen("output.txt","w");
	//printf("%s",msg);
	if(fpOut == NULL)
	{
	printf("file creation error");
	exit(0);
	}
	yyin = fpInput;
	yyparse();
	void fcloseall();
	return 0;
}
void yyerror()
{

}

----------------------
---------------------

input : 
t1=b*c
t2=t1/d
t3=a+t2
t4=t3-e
f=t4


-----------

output
MOV AX, b
ADD AX, c
MOV a, AX
MOV AX, a
SUB AX, c
MOV d, AX
MOV AX, d
MUL AX, g
MOV f, AX
MOV AX, f
DIV AX, i
MOV h, AX


--------
output cmt :
lex 5.l
yacc -d 5.y
cc lex.yy.c y.tab.c -ll
./a.out input.txt

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// 6 ) Implementation of deterministic finite automata

6.l

%{
#include "y.tab.h"
%}
%%
[0369] {return ZERO;}
[147] {return ONE;}
[258] {return TWO;}
[\n] {return NL;}
. ;
%%

-----------------------

6.y

%{
/* Definition section */ #include<stdio.h>
int flag=0;
%}
%{
int yylex();
void yyerror();
%}
%token ZERO ONE TWO NL
%start q0%%
q0 : ZERO q0 {$$ = $2;}
|
ONE q1 {$$ = $2;}
|
TWO q2 {$$ = $2;}
| NL {printf("Number is divisible by 3\n"); return(0);}
;
q1 : ZERO q1 {$$ = $2;}
| ONE q2 {$$ = $2;}
| TWO q0 {$$ = $2;}
| NL {printf("Number is not divisible by 3 remainder is 1 \n"); return(0);}
;
q2: ZERO q2 {$$ = $2;}
| ONE q0 {$$ = $2;}
| TWO q1 {$$ = $2;}
|NL {printf("Number is not divisible by 3 remainder is 2 \n");
return(0);}
;
%%
void yyerror(){}
void main()
{
printf("\n Enter Decimal number to check divisibility by 3:\n"); yyparse();
}




------------------------------------------------------
//output ;

lex 6.l
yacc -d 6.y
cc lex.yy.c y.tab.c -ll
./a.out
